package 정수론;

import java.util.Scanner;

/**
 * 
 * 백준 1929
 * 
 * (에라토스테네스 방법으로 소수 구하기)
 * 두 숫자 사이의 소수를 구하는 로직
 * 
 * [ 입력 ]
 * 3 16
 * 
 * [ 출력 ]
 * 3
 * 5
 * 7
 * 11
 * 12
 * 
 * [ 설명 ]
 * 1. 크기가 N+1인 배열을 선언한 후 값은 각각의 인덱스값으로 채운다.
 * 2. 1은 소수가 아니므로 삭제
 * 3. 2부터 N의 제곱근까지 탐색한다. 값이 인덱스값이면 그대로 두고, 그 값의 배수를 탐색해 0으로 변경한다.
 * 4. 배열에 남아 있는 수 중 M이상 N이하의 수를 모두 출력한다.(소수가 아닌 수는 0으로 변경되어 있다.)
 * 
 * 	*N의 제곱근까지만 탐색하는 이유?
 * 	- N=a*b라고 했을 때, a와 b 모두 N제곱근 보다 클 수 없다.
 *  - N제곱근까지의 값들을 약수로 삼아 그 배수를 찾고, 범위 내에서 배수가 아닌 값들을 소수로 판명한다.
 * 
 * [ 슈도코딩 ]
 * M: 시작 수
 * N: 종료 수
 * for(N만큼 반복)
 * {
 * 		A배열 초기화하기
 * }
 * 
 * for(N의 제곱근까지 반복하기)
 * {
 * 		소수가 아니면 넘어감
 * 		for(소수의 배수 값을 N까지 반복하기)
 * 		{
 * 			이 수가 소수가 아니라는 것을 표기하기
 * 		}
 * }
 * 
 * for(M ~ N까지 반복하기)
 * {
 * 		A배역에서 소수인 값 출력하기
 * }
 * 
 * 
 * **/
public class 소수_구하기 {

	public static void main(String[] args) {
			
		Scanner sc = new Scanner(System.in);
		int M = sc.nextInt();
		int N = sc.nextInt();
		
		int[] A = new int[N + 1];
		
		for(int i=2; i<=N; i++) {
			A[i] = i;
		}
		
		for(int i=2; i<=Math.sqrt(N); i++) {		// 제곱근까지만 수행하기
			if(A[i] == 0) {
				continue;
			}
			
			// j=i+i : i의 2배 값 부터 검사		// i: 2 -> 4부터	i: 3 -> 6
			// j=j+i : i의 배수만큼 이동
			for(int j=i+i; j<=N; j=j+i) {			// 배수 지우기
				A[j] = 0;
			}
		}
		
		
		for(int i=M; i<=N; i++) {
			if(A[i] != 0) {
				System.out.println(A[i]);
			}
		}
		
		
		
	}

}
